<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"                    
                    xmlns:util="clr-namespace:RapportControllerWpfApplication.Util">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Icons.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <util:InvertBoolConverter x:Key="invertBoolConverter"/>
    <Style x:Key="GroupHeaderStyle" TargetType="GroupItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupItem">
                    <Expander x:Name="exp" IsExpanded="True" Foreground="Black">
                        <Expander.Header>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Name}" FontWeight="Bold" />
                                <TextBlock Text="{Binding Path=ItemCount, StringFormat='{}{0} Plugin(s)'}" Margin="8,0,4,0"/>
                            </StackPanel>
                        </Expander.Header>
                        <ItemsPresenter />
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="validationTemplate">
        <DockPanel>
            <Border BorderBrush="Red" BorderThickness="1">
                <AdornedElementPlaceholder />
            </Border>
        </DockPanel>
    </ControlTemplate>

    <Style x:Key="textBoxInError" TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TransparentOnOverButton" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ContentPresenter />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.6" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--body content datagrid cell vertical centering-->
    <Style x:Key="Body_Content_DataGrid_Centering"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CellStyleSelectionNone" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource Body_Content_DataGrid_Centering}">
        <Setter Property="Foreground" Value="Black" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="CheckBox">
        <StackPanel Orientation="Horizontal">
            <CheckBox 
                    IsChecked="{Binding Path=IsSelected, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}"/>
        </StackPanel>
    </DataTemplate>


    <Style x:Key="TransparentOnHoverToggleButton" TargetType="ToggleButton">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <ContentPresenter />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.6" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="RunningNotRunningToggleStyle" x:Shared="false" TargetType="ToggleButton" BasedOn="{StaticResource TransparentOnHoverToggleButton}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Content">
                    <Setter.Value>
                        <Rectangle Width="16" Height="16" Fill="{StaticResource StatusPauseGrey}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Content">
                    <Setter.Value>
                        <Rectangle Width="16" Height="16" Fill="{StaticResource StatusRunGrey}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ListActiveInactiveToggleStyle" x:Shared="false" TargetType="ToggleButton" BasedOn="{StaticResource TransparentOnHoverToggleButton}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Content">
                    <Setter.Value>
                        <Rectangle Width="16" Height="16" Fill="{StaticResource TriggerListActive}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Content">
                    <Setter.Value>
                        <Rectangle Width="16" Height="16" Fill="{StaticResource TriggerListInactive}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="ThreeStateButton" BasedOn="{StaticResource TransparentOnOverButton}">
        <Style.Triggers>
            <Trigger Property="Tag" Value="Partial">
                <Setter Property="Content">
                    <Setter.Value>
                        <Rectangle Width="16" Height="16" Fill="{StaticResource IntermediateEnableAllIcon}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Tag" Value="All">
                <Setter Property="Content">
                    <Setter.Value>
                        <Rectangle Width="16" Height="16" Fill="{StaticResource EnableAllIcon}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Tag" Value="None">
                <Setter Property="Content">
                    <Setter.Value>
                        <Rectangle Width="16" Height="16" Fill="{StaticResource DisableAllIcon}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>